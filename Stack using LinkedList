class Node:
    def __init__(self, value = None):
        self.value = value
        self.next = None

class S_LinkedList:
    def __init__(self):
        self.head = None

    def __iter__(self):
        node = self.head
        while node:
            yield node
            node = node.next

class Stack_LL:
    def __init__(self):
        self.S_LinkedList = S_LinkedList()

    def __str__(self):
        values = [str(x.value) for x in self.S_LinkedList]
        return '\n'.join(values)
    
    def isEmpty(self):
        if self.S_LinkedList.head == None:
            return True
        else:
            return False
        
    def push(self, value):
        new_node = Node(value)
        new_node.next = self.S_LinkedList.head
        self.S_LinkedList.head = new_node
        
    def pop(self):
        if self.isEmpty():
            return "The stack is empty."
        else:
            temp_node = self.S_LinkedList.head.value
            self.S_LinkedList.head = self.S_LinkedList.head.next
            return temp_node
        
    def peek(self):
        if self.isEmpty():
            return "The stack is empty."
        else:
            temp_node = self.S_LinkedList.head.value
            return temp_node
        
SLL = Stack_LL()
start = True
while start:
    print("1. PUSH ELEMENT.")
    print("2. POP ELEMENT.")  
    print("3. TO CHECK IF STACK IS EMPTY.")
    print("4. PEEK.")
    print("5. PRINT")
    print("6. EXIT")
    ele = int(input("ENTER A CHOICE: "))
    
    if ele == 1:
        ele = int(input("ENTER THE VALUE: "))
        SLL.push(ele)
    elif ele == 2:
        SLL.pop()
    elif ele == 3:
        print(SLL.peek())
    elif ele == 4:
        print(SLL.isEmpty())
    elif ele == 5:
        print(SLL)
    else:
        start = False
