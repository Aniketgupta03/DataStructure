class Node:
    def __init__(self, data):
        self.data=data
        self.ref=None
        
class Linkedlist:
    def __init__(self):
        self.head=None
        
    def print_LL(self):
        if self.head is None:
            print("LinkedList is empty!!")
        else:
            n=self.head
            while n is not None:
                print( "-->",n.data, end=" ")
                n=n.ref
            print("\n")
    
    def add_begin(self,data):
        new_node = Node(data)
        new_node.ref = self.head
        self.head = new_node
        
    def add_end(self,data):
        new_node = Node(data)
        if self.head is None: 
            self.head = new_node
        else:
            n = self.head
            while n.ref is not None:
                n = n.ref
            n.ref = new_node
            
    def add_after(self,data,x):
        n = self.head
        while n is not None:
            if x == n.data:
                break
            n = n.ref
        if n is None: 
            print("Node is not present in LL")
        else:
            new_node = Node(data)
            new_node.ref = n.ref
            n.ref = new_node
            
    def add_before(self,data,x):
        if self.head is None:
            print("Linked List is Empty!!")            
        if self.head.data==x:
            new_node = Node(data)
            new_node.ref = self.head
            self.head = new_node 
            return 
        n = self.head
        while n.ref is not None:
            if  n.ref.data==x:
                break
            n = n.ref
        if n.ref is None:
            print("Node is not found!!")
        else:
            new_node = Node(data)
            new_node.ref = n.ref
            n.ref = new_node
            
    def delete_begin(self):
        if self.head is None:
            print("Linkedlist is already empty.")
            return 
        else:
            self.head = self.head.ref
            
    def delete_end(self):
        if self.head is None:
            print("Linkedlist is already empty.")
        else:
            n = self.head
            while n.ref.ref is not None:
                n = n.ref
            n.ref = None
            
    def delete_by_value(self,x):
        if self.head is None:
            print("Linkedlist is already empty.")
            return
        if x==self.head.data:
            self.head = self.head.ref
            return
        n = self.head
        while n.ref is not None:
            if x==n.ref.data:
                break
            n=n.ref
        if n.ref is None:
            print("Node is not present")
        else:
            n.ref = n.ref.ref            
            
print("*****LINKED LIST OPERATION*****")

LL = Linkedlist()
exit = True

while exit:
    print("Select any option from the given options: ")
    print("1. Insert at beginning")
    print("2. Insert at end")
    print("3. Insert before given node")
    print("4. Insert after given node")
    print("5. Delete from beginning")
    print("6. Delete from end")
    print("7. Delete from the value of node")
    print("8. Print the LinkedList")
    print("9. Exit")
    
    choice1 = int(input("Enter the operation number you want to perform: "))
    
    if choice1 == 1:
        data = int(input("Enter any value you want ot insert into node: "))
        LL.add_begin(data)
            
    elif choice1 == 2:
        data = int(input("Enter any value you want ot insert into node: "))
        LL.add_end(data)
        
    elif choice1 == 3:
        x = int(input("Enter any value from linked list before which you want insert data: "))
        data = int(input("Enter the value which you want to insert: "))
        LL.add_before(data,x)
        
    elif choice1 == 4:
        x = int(input("Enter any value from linked list before which you want insert data: "))
        data = int(input("Enter the value which you want to insert: "))
        LL.add_after(data,x)
        
    elif choice1 == 5:
        LL.delete_begin()
        
    elif choice1 == 6:
        LL.delete_end()
        
    elif choice1 == 7:
        x = int(input("Enter the value of node which you want to delete: "))
        LL.delete_by_value(x)
        
    elif choice1 == 8:
        LL.print_LL()
    
    elif choice1 == 9:
        exit = False        
    else:
        print("Incorrect choice!!")
